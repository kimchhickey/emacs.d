Emacs config -*- mode: org -*-

* General Settings
** Increase font size for better readability
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Increase font size for better readability
   #+BEGIN_SRC emacs-lisp
   (set-face-attribute 'default nil :height 140)
   #+END_SRC

** Full path in title bar
   #+BEGIN_SRC emacs-lisp
   (setq frame-title-format "%b (%f)")
   #+END_SRC

** Save Place
   #+BEGIN_SRC emacs-lisp
   (save-place-mode 1)
   #+END_SRC

** Don't show startup message
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-message t)
   #+END_SRC

** Show matching parenthesis
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC

** Disable the annoying bell ring
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC

** Disable blinking cursor
   #+BEGIN_SRC emacs-lisp
   (blink-cursor-mode -1)
   #+END_SRC

** New line at end of file
   #+BEGIN_SRC emacs-lisp
   (setq require-file-newline t)
   #+END_SRC

** Delete the selection with a keypress
   #+BEGIN_SRC emacs-lisp
   (delete-selection-mode t)
   #+END_SRC

** Highlight line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode +1)
   #+END_SRC

** Display line numbers when programming
   #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC

* UI
** Default UI
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (column-number-mode t)
   (size-indication-mode t)
   #+END_SRC

** Theme
   #+BEGIN_SRC emacs-lisp
   (use-package afternoon-theme
     :ensure t
     :config
     (load-theme 'afternoon t))
   #+END_SRC

* Modes
** Ido Mode
   #+BEGIN_SRC emacs-lisp
   (setq ido-everywhere t)
   (setq ido-enable-flex-matching t)
   (ido-mode t)
   #+END_SRC

* General Packages
** Execute PATH from shell
   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :config
     (exec-path-from-shell-initialize))
   #+END_SRC

** Which key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
     (which-key-mode))
   #+END_SRC

** Smex
   #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :bind (("M-x" . smex))
     :config
     (smex-initialize))
   #+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (projectile-global-mode))
   #+END_SRC

** Rainbow
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t)
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :init
     (progn
       (setq dashboard-items '((recents  . 5)
                               (bookmarks . 5)
                               (projects . 5)
                               (agenda . 5)
                               (registers . 5)))
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-banner-logo-title nil)
       (setq dashboard-center-content t))
     :config
     (dashboard-setup-startup-hook))
   #+END_SRC

** Magit
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-x g" . magit-status)))
   #+END_SRC

* Programming Packages
** Paredit
   #+BEGIN_SRC emacs-lisp
   (use-package paredit
     :ensure t
     :config
     (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
     ;; enable in the *scratch* buffer
     (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
     (add-hook 'ielm-mode-hook #'paredit-mode)
     (add-hook 'lisp-mode-hook #'paredit-mode)
     (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode))
   #+END_SRC
** Rainbow delimiters
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :config
     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

** Clojure Mode
   #+BEGIN_SRC emacs-lisp
   (use-package clojure-mode
     :ensure t
     :config
     (add-hook 'clojure-mode-hook #'paredit-mode)
     (add-hook 'clojure-mode-hook #'subword-mode)
     (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))

   (use-package clojure-mode-extra-font-locking
     :ensure t)

   (use-package cider
     :ensure t
     :config
     (setq nrepl-log-messages t)
     (add-hook 'cider-mode-hook #'eldoc-mode)
     (add-hook 'cider-repl-mode-hook #'eldoc-mode)
     (add-hook 'cider-repl-mode-hook #'paredit-mode)
     (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

** Company
   #+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :config
     (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
     (setq company-idle-delay nil)
     (setq company-show-numbers t)
     (setq company-tooltip-limit 10)
     (setq company-minimum-prefix-length 2)
     (setq company-tooltip-align-annotations t)
     ;; invert the navigation direction if the the completion popup-isearch-match
     ;; is displayed on top (happens near the bottom of windows)
     (setq company-tooltip-flip-when-above t)
     (add-hook 'after-init-hook #'global-company-mode)
     (add-hook 'cider-repl-mode-hook #'cider-company-enable-fuzzy-completion)
     (add-hook 'cider-mode-hook #'cider-company-enable-fuzzy-completion))
   #+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
;; (use-package flycheck
;;  :ensure t
;;   :config
;;  (add-hook 'after-init-hook #'global-flycheck-mode))

;; (use-package flyspell
;;  :config
;;  (setq ispell-program-name "aspell" ; use aspell instead of ispell
;;        ispell-extra-args '("--sug-mode=ultra"))
;;  (add-hook 'text-mode-hook #'flyspell-mode)
;;  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
   #+END_SRC
   
